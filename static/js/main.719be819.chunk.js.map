{"version":3,"sources":["logo.svg","SearchField.js","DisplayTiles.js","Display.js","filterEmoji.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchField","handleChange","event","props","inputChange","className","class","href","type","placeholder","onChange","this","PureComponent","DisplayTiles","codePointHexVal","symbol","codePointAt","toString","srcVal","src","alt","title","Display","emojiVal","map","data","key","keywords","filterEmoji","searchValue","limit","emojiList","filter","emoji","toLowerCase","includes","App","handleIputValues","e","setState","filterEmojiVal","target","value","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"onsKAAAA,EAAOC,QAAU,IAA0B,kC,4ICGtBC,G,uNAQjBC,aAAe,SAAAC,GACX,EAAKC,MAAMC,YAAYF,I,wEAKvB,OACI,yBAAKG,UAAU,gBACX,gEACA,uBAAGC,MAAM,SAAT,wDAAsE,uBAAGC,KAAK,kCAAR,WAAtE,MAA6H,uBAAGA,KAAK,kCAAR,WAC7H,yDACA,yBAAKF,UAAU,iBACX,2BAAOG,KAAK,OAAOC,YAAY,eAAeC,SAAUC,KAAKV,qB,GApBxCW,kBCDpBC,E,iLAMb,IAAMC,EAAkBH,KAAKR,MAAMY,OAAOC,YAAY,GAAGC,SAAS,IAC5DC,EAAM,iDAA6CJ,EAA7C,QACZ,OACI,yBAAKT,UAAU,YACX,yBAAKc,IAAKD,EAAQE,IAAKT,KAAKR,MAAMkB,a,GAVRT,iBCErBU,E,iLAOb,OACI,yBAAKjB,UAAU,iBACVM,KAAKR,MAAMoB,SAASC,KAAI,SAAAC,GAAI,OACzB,kBAAC,EAAD,CAAcC,IAAKD,EAAKJ,MAAON,OAAQU,EAAKV,OAAQM,MAAOI,EAAKE,mB,GAV/Cf,iB,QCFtB,SAASgB,EAAYC,EAAaC,GAC7C,OAAOC,EAAUC,QAAO,SAAUC,GAC9B,QAAIA,EAAMZ,MAAMa,cAAcC,SAASN,EAAYK,kBAI/CD,EAAMN,SAASQ,SAASN,M,ICAfO,E,YACnB,WAAYjC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRkC,iBAAmB,SAAAC,GACjB,EAAKC,SAAS,CACZC,eAAgBZ,EAAYU,EAAEG,OAAOC,UAPvC,EAAKC,MAAQ,CACXH,eAAgBZ,EAAY,KAHb,E,sEAcjB,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,CAAaD,YAAaO,KAAK0B,mBAC/B,kBAAC,EAAD,CAASd,SAAUZ,KAAKgC,MAAMH,sB,GAlBL5B,iBCIbgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCZNC,IAASC,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAkBC,SAASC,eAAe,SD6H5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.719be819.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { PureComponent } from 'react';\r\nimport propTypes from \"prop-types\";\r\n\r\nexport default class SearchField extends PureComponent {\r\n\r\n\r\n    static propTypes = {\r\n        inputChange: propTypes.func\r\n    };\r\n\r\n\r\n    handleChange = event => {\r\n        this.props.inputChange(event)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-field\">\r\n                <h3>Which Emoji are you looking for?</h3>\r\n                <p class=\"label\">A react project for searching emoji | by Saifudeen | <a href=\"https://codepen.io/nisaifudeen\">Codepen</a> | <a href=\"https://codepen.io/nisaifudeen\">Github</a></p>\r\n                <p>Inspired by React examples</p>\r\n                <div className=\"input-wrapper\">\r\n                    <input type=\"text\" placeholder=\"Search emoji\" onChange={this.handleChange} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n} ","import React, { PureComponent } from 'react';\r\nimport propTypes from \"prop-types\";\r\nexport default class DisplayTiles extends PureComponent {\r\n    static propTypes = {\r\n        title: propTypes.string,\r\n        symbol: propTypes.string\r\n    }\r\n    render() {\r\n        const codePointHexVal = this.props.symbol.codePointAt(0).toString(16);\r\n        const srcVal = `//cdn.jsdelivr.net/emojione/assets/png/${codePointHexVal}.png`;\r\n        return (\r\n            <div className=\"img-size\">\r\n                <img src={srcVal} alt={this.props.title} />\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport DisplayTiles from './DisplayTiles';\r\n\r\nimport propTypes from \"prop-types\";\r\nexport default class Display extends PureComponent {\r\n    static propTypes = {\r\n        emojiVal: propTypes.array\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"display-field\">\r\n                {this.props.emojiVal.map(data => (\r\n                    <DisplayTiles key={data.title} symbol={data.symbol} title={data.keywords} />\r\n\r\n                ))\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n} ","import emojiList from \"./emojiList.json\";\r\n\r\nexport default function filterEmoji(searchValue, limit) {\r\n    return emojiList.filter(function (emoji) {\r\n        if (emoji.title.toLowerCase().includes(searchValue.toLowerCase())) {\r\n            return true;\r\n        }\r\n\r\n        if (emoji.keywords.includes(searchValue)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    })\r\n}","import React, { PureComponent } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport SearchField from './SearchField';\nimport Display from './Display';\nimport filterEmoji from './filterEmoji';\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterEmojiVal: filterEmoji(\"\", 20)\n    }\n  }\n\n  handleIputValues = e => {\n    this.setState({\n      filterEmojiVal: filterEmoji(e.target.value, 20)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SearchField inputChange={this.handleIputValues} />\n        <Display emojiVal={this.state.filterEmojiVal} />\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}